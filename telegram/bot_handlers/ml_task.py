import requests
import logging
from telebot import types
from io import BytesIO
from PIL import Image
from config import API_URL, logger
from bot_handlers.sheduler import init_scheduler_get_task
from datetime import datetime, timedelta
import base64


def give_image_handlers(bot_instance):
    @bot_instance.callback_query_handler(func=lambda call: call.data == 'give_image')
    def give_image_button(call):
        try:
            chat_id = call.message.chat.id

            bot_instance.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=None
            )

            bot_instance.send_message(
                chat_id,
                "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG/JPG\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            bot_instance.register_next_step_handler(call.message, process_received_image)

        except Exception as e:
            logger.error(f"Error in give_image_button: {e}")
            bot_instance.reply_to(
                call.message,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    def process_received_image(message):
        try:
            chat_id = message.chat.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
            if message.text and message.text.lower() == '/cancel':
                bot_instance.send_message(chat_id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if not message.photo and not (message.document and
                                        message.document.mime_type in ['image/jpeg', 'image/jpg']):
                bot_instance.send_message(
                    chat_id,
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG/JPG\n"
                    "–õ–∏–±–æ –∫–∞–∫ —Ñ–æ—Ç–æ, –ª–∏–±–æ –∫–∞–∫ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .jpg/.jpeg\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
                bot_instance.register_next_step_handler(message, process_received_image)
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if message.photo:
                file_info = bot_instance.get_file(message.photo[-1].file_id)
            else:
                file_info = bot_instance.get_file(message.document.file_id)

            downloaded_file = bot_instance.download_file(file_info.file_path)

            # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_and_send_image(message, downloaded_file)

        except Exception as e:
            logger.error(f"Image processing error: {e}")
            bot_instance.send_message(
                chat_id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    def process_and_send_image(message, image_bytes):
        try:
            chat_id = message.chat.id

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            with BytesIO(image_bytes) as file_bytes:
                files = {'file': ('image.jpg', file_bytes, 'image/jpeg')}

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                bot_instance.send_message(chat_id, "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≤–∞—à API
                response = requests.post(
                    f"{API_URL}/ml_task/",
                    files=files,
                    timeout=30
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                response.raise_for_status()
                result = response.json()

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                response_text = (
                    f"‚úÖ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n\n"
                    f"üÜî ID –∑–∞–¥–∞—á–∏: {result.get('task_id', 'N/A')}\n"
                    f"üîë –ü–∞—Ä–æ–ª—å: {result.get('password', 'N/A')}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."
                )

                bot_instance.send_message(chat_id, response_text)
                info = "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ:"
                init_scheduler_get_task(datetime.now() + timedelta(minutes=1), chat_id, info)

        except requests.exceptions.RequestException as e:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
            if isinstance(e, requests.exceptions.Timeout):
                error_msg = "‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(f"API Error: {str(e)}")
            bot_instance.send_message(chat_id, error_msg)

        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            bot_instance.send_message(
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    @bot_instance.callback_query_handler(func=lambda call: call.data == 'get_task')
    def handle_get_task(call):
        try:
            chat_id = call.message.chat.id

            # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            bot_instance.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=None
            )

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∑–∞–¥–∞—á–∏
            msg = bot_instance.send_message(
                chat_id,
                "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:\n"
                "(–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)"
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –æ–±—Ä–∞–±–æ—Ç–∫—É ID
            bot_instance.register_next_step_handler(msg, process_task_id)

        except Exception as e:
            logger.error(f"Error in handle_get_task: {e}")
            bot_instance.send_message(
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    def process_task_id(message):
        try:
            chat_id = message.chat.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
            if message.text and message.text.lower() == '/cancel':
                bot_instance.send_message(chat_id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return

            task_id = message.text.strip()

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            msg = bot_instance.send_message(
                chat_id,
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞–¥–∞—á–∏:\n"
                "(–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)"
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞—Ä–æ–ª—è
            bot_instance.register_next_step_handler(msg, process_task_password, task_id)

        except Exception as e:
            logger.error(f"Error in process_task_id: {e}")
            bot_instance.send_message(
                chat_id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    def process_task_password(message, task_id):
        try:
            chat_id = message.chat.id
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
            if message.text and message.text.lower() == '/cancel':
                bot_instance.send_message(chat_id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return

            password = message.text.strip()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            bot_instance.send_message(chat_id, "üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ...")

            response = requests.get(
                f"{API_URL}/ml_task/{task_id}",  # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é task_id
                params={'password': password},  # –ü–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ query-–ø–∞—Ä–∞–º–µ—Ç—Ä
                timeout=10
            )

            if response.status_code == 200:
                data = response.json()

                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_bytes = base64.b64decode(data['image'])
                img = Image.open(BytesIO(image_bytes))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                with BytesIO() as output:
                    img.save(output, format='JPEG')
                    output.seek(0)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    bot_instance.send_photo(chat_id, photo=output)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                bot_instance.send_message(
                    chat_id,
                    f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ {task_id}:\n\n"
                    f"{data.get('result', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
                )

            elif response.status_code == 404:
                bot_instance.send_message(chat_id, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                bot_instance.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.text}")

        except Exception as e:
            logger.error(f"Error in process_task_id_for_result: {e}")
            bot_instance.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            bot_instance.delete_state(chat_id)